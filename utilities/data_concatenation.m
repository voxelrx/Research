path = '~/Documents/research/AWS/sparse_filtering/saved/';
addpath(genpath(path))

folders = dir([path, '/2016*']);

% select only most recent folder for concatentation (optional)
folders = folders(end);  % end

% automatically get batch size and activation output size from helper
helper_file = [path, folders.name, '/helper.mat']; 
load(helper_file)
if size(output_size, 2) == 2
    master = zeros(output_size(1), batches * output_size(2));
    batch_size = output_size(2);
elseif size(output_size, 2) == 4
    master = zeros(batches * output_size(1), output_size(2), output_size(3));
    batch_size = output_size(1);
end

for folder = 1:numel(folders)

    fileNames = dir(...
        [...
            path, ...
            folders(folder).name, ...
            '/activations_norm*.mat'...  % raw
        ]...
    );

    master = []; 
    batch = 1; 
    for file = 1:numel(fileNames)
        temp = load(...
            [
                path,...
                folders(folder).name,...
                '/'...
                fileNames(file).name...
            ]...
        );
        field = fieldnames(temp); 
        
        if size(output_size, 2) ==4
            temp = reshape(...
                temp.(field{1}), [...
                    size(temp.(field{1}), 1),...
                    size(temp.(field{1}), 2),...
                    size(temp.(field{1}), 3) * size(temp.(field{1}), 4)...
                ]...
            );
        else
            temp = temp.(field{1});
        end

    
        batch_begin = (batch - 1) * batch_size + 1;
        batch_end = batch_begin + batch_size - 1;
        if size(output_size, 2) == 2
            master(:, batch_begin:batch_end) = temp;
        elseif size(output_size, 2) == 4
            master(batch_begin:batch_end, :, :) = temp;
        end

        disp(num2str(file))
        batch = batch + 1;
    end

    save(...
        [...
            path, ...
            folders(folder).name, ...
            '/concatenated_activations.mat'...
        ],...
    'master',...
    '-v7.3'...
    )...
    
end